<?php
/**
 * @file
 * implements the menufield module
 */

/**
 * Implements hook_field_info().
 *
 * Provides a description of the field.
 */
function menufield_field_info() {
  $output = array(
    'menufield_menureference' => array(
      'label'             => t('Menu Reference'),
      'description'       => t('Implements a reference to a custom menu'),
      'default_widget'    => 'menufield_select',
      'default_formatter' => 'menufield_simple_text',
    ),
  );
  return $output;
}

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our field.
 * We're really only interested in the $items parameter, since it holds
 * arrays representing content in the field we've defined.
 */
function menufield_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (! empty($item['menureference'])) {
      if (! ($item['menureference'] == 0)) {
        $query = 'SELECT menu_name FROM {menu_custom} WHERE menu_name = :menu';
        $result = db_query($query,array(':menu' => $item['menureference']));
        foreach ($result as $record) {
          break;
        }
        if (! isset($record)) {
          $errors[$field['field_name']][$langcode][$delta][] = array(
            'error'   => 'menufield_invalid',
            'message' => t('Menu selected is invalid.'),
          );
        }
      }
    }
  }
}

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_empty() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function menufield_field_is_empty($item, $field) {
  return empty($item['menureference']);
}


/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have just one formatter
 * for this field. It will change render the menu with
 * default settings
 *
 * @see menufield_field_formatter_view()
 */
function menufield_field_formatter_info() {
  return array(
    // This formatter simply outputs the menu reference rendered with default settings for now.
    'menufield_menuitems' => array(
      'label' => t('List of links implemented by the selected menu'),
      'field types' => array('menufield_menureference'),
    ),
  );
}

/**
 * Implements hook_field_formatter_view().
 *
 * One formatter is implemented.
 * - menufield_menuitems just outputs markup generated by the default
 *   menu renderer.
 *
 * @see menufield_field_formatter_info()
 */
function menufield_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {

    // This formatter simply outputs the menu reference rendered with default settings for now.
    case 'menufield_menuitems':
      foreach ($items as $delta => $item) {
        if ($item['menureference'] === 0) {
          $element[$delta] = array('#markup' => 'item selected was 0');
        } else {
          $element[$delta] = array(
            '#markup' => theme('links', array('links' => menu_navigation_links($item['menureference']))),
          );
        }
        break;
      }
  }

  return $element;
}

/**
 * Implements hook_field_widget_info().
 *
 * One widget is provided.
 * - A simple select widget where the user a menu from the list of custom menus.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see menufield_field_widget_form()
 */
function menufield_field_widget_info() {
  return array(
    'menufield_select' => array(
      'label'       => t('List of available custom menus'),
      'field types' => array('menufield_menureference'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide just one form, since our field is fairly simple.
 *
 * The 'menufield_select' lists items in the menu_custom table.
 *
 */
function menufield_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['menureference']) ? $items[$delta]['menureference'] : '';

  $widget = $element;
  $widget['#delta'] = $delta;

  switch ($instance['widget']['type']) {

    case 'menufield_select':
      $widget += array(
        '#type' => 'select',
        '#default_value' => $value,
        // get the options from a custom helper function.
        '#options' => _menufield_preloadmenus(),
      );
      break;
  }

  $element['menureference'] = $widget;
  return $element;
}

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see menufield_field_validate()
 * @see form_error()
 */
function menufield_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'menufield_invalid':
      form_error($element, $error['message']);
      break;
  }
}


/**
 * Implements hook_menu().
 *
 * Provides a simple user interface that tells the developer where to go.
 */
function menufield_menu() {
  $items['examples/menufield'] = array(
    'title' => 'Field Example',
    'page callback' => '_menufield_page',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * A simple page to explain to the developer what to do.
 */
function _menufield_page() {
  return t("The Field Example provides a field composed of an HTML menureference value, like #ff00ff. To use it, add the field to a content type.");
}

/**
 * Helper function that preloads the menus into an array for the field widget
 */
function _menufield_preloadmenus(){
  $output = array( 0 => '-- NONE --');
  $query = 'SELECT menu_name, title FROM {menu_custom} ORDER BY title';
  $result = db_query($query);
  foreach ($result as $record) {
    $output[$record->menu_name] = $record->title;
  }
  return $output;
}
/**
 * @} End of "defgroup menufield".
 */
